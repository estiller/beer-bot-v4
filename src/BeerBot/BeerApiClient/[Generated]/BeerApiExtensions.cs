// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace BeerBot.BeerApiClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for BeerApi.
    /// </summary>
    public static partial class BeerApiExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchTerm'>
            /// </param>
            /// <param name='breweryId'>
            /// </param>
            /// <param name='categoryId'>
            /// </param>
            /// <param name='styleId'>
            /// </param>
            /// <param name='minAbv'>
            /// </param>
            /// <param name='maxAbv'>
            /// </param>
            public static IList<Beer> GetBeers(this IBeerApi operations, IList<string> searchTerm = default(IList<string>), IList<int?> breweryId = default(IList<int?>), IList<int?> categoryId = default(IList<int?>), IList<int?> styleId = default(IList<int?>), double? minAbv = default(double?), double? maxAbv = default(double?))
            {
                return operations.GetBeersAsync(searchTerm, breweryId, categoryId, styleId, minAbv, maxAbv).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchTerm'>
            /// </param>
            /// <param name='breweryId'>
            /// </param>
            /// <param name='categoryId'>
            /// </param>
            /// <param name='styleId'>
            /// </param>
            /// <param name='minAbv'>
            /// </param>
            /// <param name='maxAbv'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Beer>> GetBeersAsync(this IBeerApi operations, IList<string> searchTerm = default(IList<string>), IList<int?> breweryId = default(IList<int?>), IList<int?> categoryId = default(IList<int?>), IList<int?> styleId = default(IList<int?>), double? minAbv = default(double?), double? maxAbv = default(double?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBeersWithHttpMessagesAsync(searchTerm, breweryId, categoryId, styleId, minAbv, maxAbv, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Beer GetRandomBeer(this IBeerApi operations)
            {
                return operations.GetRandomBeerAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Beer> GetRandomBeerAsync(this IBeerApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRandomBeerWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Beer GetBeerById(this IBeerApi operations, int id)
            {
                return operations.GetBeerByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Beer> GetBeerByIdAsync(this IBeerApi operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBeerByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchTerm'>
            /// </param>
            /// <param name='country'>
            /// </param>
            public static IList<Brewery> GetBreweries(this IBeerApi operations, IList<string> searchTerm = default(IList<string>), IList<string> country = default(IList<string>))
            {
                return operations.GetBreweriesAsync(searchTerm, country).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchTerm'>
            /// </param>
            /// <param name='country'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Brewery>> GetBreweriesAsync(this IBeerApi operations, IList<string> searchTerm = default(IList<string>), IList<string> country = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBreweriesWithHttpMessagesAsync(searchTerm, country, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Brewery GetBreweryById(this IBeerApi operations, int id)
            {
                return operations.GetBreweryByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Brewery> GetBreweryByIdAsync(this IBeerApi operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBreweryByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<string> GetBreweriesCountries(this IBeerApi operations)
            {
                return operations.GetBreweriesCountriesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<string>> GetBreweriesCountriesAsync(this IBeerApi operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBreweriesCountriesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchTerm'>
            /// </param>
            public static IList<Category> GetCategories(this IBeerApi operations, IList<string> searchTerm = default(IList<string>))
            {
                return operations.GetCategoriesAsync(searchTerm).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchTerm'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Category>> GetCategoriesAsync(this IBeerApi operations, IList<string> searchTerm = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCategoriesWithHttpMessagesAsync(searchTerm, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Category GetCategoryById(this IBeerApi operations, int id)
            {
                return operations.GetCategoryByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Category> GetCategoryByIdAsync(this IBeerApi operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCategoryByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchTerm'>
            /// </param>
            /// <param name='categoryId'>
            /// </param>
            public static IList<Style> GetStyles(this IBeerApi operations, IList<string> searchTerm = default(IList<string>), IList<int?> categoryId = default(IList<int?>))
            {
                return operations.GetStylesAsync(searchTerm, categoryId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchTerm'>
            /// </param>
            /// <param name='categoryId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Style>> GetStylesAsync(this IBeerApi operations, IList<string> searchTerm = default(IList<string>), IList<int?> categoryId = default(IList<int?>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStylesWithHttpMessagesAsync(searchTerm, categoryId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Style GetStyleById(this IBeerApi operations, int id)
            {
                return operations.GetStyleByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Style> GetStyleByIdAsync(this IBeerApi operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetStyleByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
